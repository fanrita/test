{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 10,
    "pending": 0,
    "failures": 2,
    "start": "2019-09-29T19:19:51.819Z",
    "end": "2019-09-29T19:20:11.595Z",
    "duration": 19776,
    "testsRegistered": 12,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "26f09925-91a8-4ad6-8677-2c36b846420d",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
          "title": "Filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be possible apply filter by name (example #1)",
              "fullTitle": "Filters should be possible apply filter by name (example #1)",
              "timedOut": null,
              "duration": 1360,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "187a5580-84f3-40d0-9489-bcf3b9389a09",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #2)",
              "fullTitle": "Filters should be possible apply filter by name (example #2)",
              "timedOut": null,
              "duration": 5168,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)",
                "diff": null
              },
              "uuid": "c9ed17b8-d642-4ca0-a3b7-ac13468dfb89",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #3)",
              "fullTitle": "Filters should be possible apply filter by name (example #3)",
              "timedOut": null,
              "duration": 642,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b14624b4-0328-4c90-b198-47136ac90b60",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #1)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #1)",
              "timedOut": null,
              "duration": 1043,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "02b566d8-e1a9-400c-8108-ae1ddacf43d2",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #2)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #2)",
              "timedOut": null,
              "duration": 5472,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)",
                "diff": null
              },
              "uuid": "dea15c5a-7409-4d6b-b394-86140be06676",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #3)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #3)",
              "timedOut": null,
              "duration": 854,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f9fef929-18a0-47e6-925d-f34fec5f43f6",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #1)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #1)",
              "timedOut": null,
              "duration": 723,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9de3bc44-22f9-430c-8e5d-90a6ccedd93d",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #2)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #2)",
              "timedOut": null,
              "duration": 860,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "6e449c7f-4cda-4afc-95f6-b7b4d20a7878",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #3)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #3)",
              "timedOut": null,
              "duration": 792,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "a5dc0f37-587d-4ca0-9e40-13bbb58afc83",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #4)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #4)",
              "timedOut": null,
              "duration": 1281,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c2515020-09df-426a-90d8-b4d4abd1984a",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by city",
              "fullTitle": "Filters should be possible apply filter by city",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4c273391-a136-4c84-9929-7c61f4d305a0",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible to clear filter",
              "fullTitle": "Filters should be possible to clear filter",
              "timedOut": null,
              "duration": 682,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "e3990d73-b106-4fb5-b675-48492a6a9364",
              "parentUUID": "2a3a8007-c9b9-4a39-bad1-6ae037a1e8b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "187a5580-84f3-40d0-9489-bcf3b9389a09",
            "b14624b4-0328-4c90-b198-47136ac90b60",
            "02b566d8-e1a9-400c-8108-ae1ddacf43d2",
            "f9fef929-18a0-47e6-925d-f34fec5f43f6",
            "9de3bc44-22f9-430c-8e5d-90a6ccedd93d",
            "6e449c7f-4cda-4afc-95f6-b7b4d20a7878",
            "a5dc0f37-587d-4ca0-9e40-13bbb58afc83",
            "c2515020-09df-426a-90d8-b4d4abd1984a",
            "4c273391-a136-4c84-9929-7c61f4d305a0",
            "e3990d73-b106-4fb5-b675-48492a6a9364"
          ],
          "failures": [
            "c9ed17b8-d642-4ca0-a3b7-ac13468dfb89",
            "dea15c5a-7409-4d6b-b394-86140be06676"
          ],
          "pending": [],
          "skipped": [],
          "duration": 19458,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}