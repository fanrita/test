{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 10,
    "pending": 0,
    "failures": 2,
    "start": "2019-09-29T20:13:21.714Z",
    "end": "2019-09-29T20:13:44.823Z",
    "duration": 23109,
    "testsRegistered": 12,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6aa99e91-4334-491e-a0a7-c36a6abc8108",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
          "title": "Filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be possible apply filter by name (example #1)",
              "fullTitle": "Filters should be possible apply filter by name (example #1)",
              "timedOut": null,
              "duration": 2541,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "4d9a8440-16d6-40c5-949f-221a5045cddd",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #2)",
              "fullTitle": "Filters should be possible apply filter by name (example #2)",
              "timedOut": null,
              "duration": 5538,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)\n    at <anonymous>",
                "diff": null
              },
              "uuid": "7e4b6ec9-3e90-4a1b-8210-49f29b7c6f0c",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #3)",
              "fullTitle": "Filters should be possible apply filter by name (example #3)",
              "timedOut": null,
              "duration": 577,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "9282eadb-2781-4800-902a-6a71c16b2255",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #1)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #1)",
              "timedOut": null,
              "duration": 784,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "26e6bf65-b4b7-470f-8d15-c992bab07675",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #2)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #2)",
              "timedOut": null,
              "duration": 6190,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)\n    at <anonymous>",
                "diff": null
              },
              "uuid": "fada51ea-021a-4ef6-bc1f-8c7bfdf303d2",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #3)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #3)",
              "timedOut": null,
              "duration": 1044,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "b9fd9c49-fc45-48ee-994d-11242b25583a",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #1)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #1)",
              "timedOut": null,
              "duration": 753,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "c79ffd6c-1c8c-4f19-b3cc-d5bc0345de24",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #2)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #2)",
              "timedOut": null,
              "duration": 910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "3e74a3bc-433e-4b39-9ca3-84883de24394",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #3)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #3)",
              "timedOut": null,
              "duration": 833,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7a637f98-c80b-4991-95d9-98f17ccfd748",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #4)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #4)",
              "timedOut": null,
              "duration": 1467,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "7a3b5c70-4d80-4184-9399-e21590647446",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by city",
              "fullTitle": "Filters should be possible apply filter by city",
              "timedOut": null,
              "duration": 910,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "2680f436-a90b-4359-bd6f-5df100e8dccd",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible to clear filter",
              "fullTitle": "Filters should be possible to clear filter",
              "timedOut": null,
              "duration": 882,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "650a279d-a3d1-43ba-8965-42728d4c658d",
              "parentUUID": "ce0cc8a1-0573-46c9-ba60-92c29ce97e78",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d9a8440-16d6-40c5-949f-221a5045cddd",
            "9282eadb-2781-4800-902a-6a71c16b2255",
            "26e6bf65-b4b7-470f-8d15-c992bab07675",
            "b9fd9c49-fc45-48ee-994d-11242b25583a",
            "c79ffd6c-1c8c-4f19-b3cc-d5bc0345de24",
            "3e74a3bc-433e-4b39-9ca3-84883de24394",
            "7a637f98-c80b-4991-95d9-98f17ccfd748",
            "7a3b5c70-4d80-4184-9399-e21590647446",
            "2680f436-a90b-4359-bd6f-5df100e8dccd",
            "650a279d-a3d1-43ba-8965-42728d4c658d"
          ],
          "failures": [
            "7e4b6ec9-3e90-4a1b-8210-49f29b7c6f0c",
            "fada51ea-021a-4ef6-bc1f-8c7bfdf303d2"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22429,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}