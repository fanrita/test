{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 10,
    "pending": 0,
    "failures": 2,
    "start": "2019-09-29T19:14:02.384Z",
    "end": "2019-09-29T19:14:29.556Z",
    "duration": 27172,
    "testsRegistered": 12,
    "passPercent": 83.33333333333334,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d96936ad-5bce-4d40-896f-20b944e85285",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
          "title": "Filters",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should be possible apply filter by name (example #1)",
              "fullTitle": "Filters should be possible apply filter by name (example #1)",
              "timedOut": null,
              "duration": 4681,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "5130b303-3aad-40cc-bfa2-a8debe2ae917",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #2)",
              "fullTitle": "Filters should be possible apply filter by name (example #2)",
              "timedOut": null,
              "duration": 5703,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)\n    at <anonymous>",
                "diff": null
              },
              "uuid": "7f9a1b52-2763-49ca-a81f-fd2d044e1637",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name (example #3)",
              "fullTitle": "Filters should be possible apply filter by name (example #3)",
              "timedOut": null,
              "duration": 1521,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "31eb0405-e8e0-4998-904b-5142d845d0cf",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #1)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #1)",
              "timedOut": null,
              "duration": 1118,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "abb47688-a073-45fc-9d8f-e0513f7f0f1a",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #2)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #2)",
              "timedOut": null,
              "duration": 5648,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {
                "message": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.",
                "estack": "CypressError: Timed out retrying: Expected to find element: '[data-e2e=\"applied-section\"] [data-e2e=\"crew-member-container\"]', but never found it.\n    at Object.cypressErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85348:11)\n    at Object.throwErr (http://localhost:3000/__cypress/runner/cypress_runner.js:85303:18)\n    at Object.throwErrByPath (http://localhost:3000/__cypress/runner/cypress_runner.js:85335:17)\n    at retry (http://localhost:3000/__cypress/runner/cypress_runner.js:77321:16)\n    at onFailFn (http://localhost:3000/__cypress/runner/cypress_runner.js:68422:16)\n    at tryCatcher (http://localhost:3000/__cypress/runner/cypress_runner.js:118962:23)\n    at Promise._settlePromiseFromHandler (http://localhost:3000/__cypress/runner/cypress_runner.js:116898:31)\n    at Promise._settlePromise (http://localhost:3000/__cypress/runner/cypress_runner.js:116955:18)\n    at Promise._settlePromise0 (http://localhost:3000/__cypress/runner/cypress_runner.js:117000:10)\n    at Promise._settlePromises (http://localhost:3000/__cypress/runner/cypress_runner.js:117075:18)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueue (http://localhost:3000/__cypress/runner/cypress_runner.js:113687:16)\n    at Async../node_modules/bluebird/js/release/async.js.Async._drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113697:10)\n    at Async.drainQueues (http://localhost:3000/__cypress/runner/cypress_runner.js:113571:14)\n    at <anonymous>",
                "diff": null
              },
              "uuid": "31f9f0bf-1b6c-41f5-a95b-c818e1e7e387",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by name and city (example #3)",
              "fullTitle": "Filters should be possible apply filter by name and city (example #3)",
              "timedOut": null,
              "duration": 1488,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "dd649224-2c59-491e-ba8d-812e7fdd22b3",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #1)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #1)",
              "timedOut": null,
              "duration": 1154,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "78ac68ed-ce5e-4954-8e72-875b3f309e82",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #2)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #2)",
              "timedOut": null,
              "duration": 1073,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "1c204b9d-aad5-44cf-8289-afe74ee61daa",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #3)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #3)",
              "timedOut": null,
              "duration": 891,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d4fabe73-a601-488c-8e4e-9e554e866951",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be show empty results if filter by invalid name or invalid city (example #4)",
              "fullTitle": "Filters should be show empty results if filter by invalid name or invalid city (example #4)",
              "timedOut": null,
              "duration": 1633,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "fd1d1561-4aea-452d-a033-a9728ae3bdbe",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible apply filter by city",
              "fullTitle": "Filters should be possible apply filter by city",
              "timedOut": null,
              "duration": 870,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "d17ea1ce-9fd5-4914-a02f-bbe21165ed94",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be possible to clear filter",
              "fullTitle": "Filters should be possible to clear filter",
              "timedOut": null,
              "duration": 1115,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const state = window.testState;\nreturn cy\n  .then(() => state.onStartScenario(scenario, indexedSteps))\n  .then(() => resolveAndRunBeforeHooks.call(this, scenario.tags))\n  .then(() =>\n    indexedSteps.forEach(step => stepTest.call(this, state, step, rowData))\n  )\n  .then(() => resolveAndRunAfterHooks.call(this, scenario.tags))\n  .then(() => state.onFinishScenario(scenario));",
              "err": {},
              "uuid": "f7fe4ad1-4bf2-4d57-aafb-b22eda40989c",
              "parentUUID": "2b44bbe6-5923-484e-8598-2e1c0d7aa02a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5130b303-3aad-40cc-bfa2-a8debe2ae917",
            "31eb0405-e8e0-4998-904b-5142d845d0cf",
            "abb47688-a073-45fc-9d8f-e0513f7f0f1a",
            "dd649224-2c59-491e-ba8d-812e7fdd22b3",
            "78ac68ed-ce5e-4954-8e72-875b3f309e82",
            "1c204b9d-aad5-44cf-8289-afe74ee61daa",
            "d4fabe73-a601-488c-8e4e-9e554e866951",
            "fd1d1561-4aea-452d-a033-a9728ae3bdbe",
            "d17ea1ce-9fd5-4914-a02f-bbe21165ed94",
            "f7fe4ad1-4bf2-4d57-aafb-b22eda40989c"
          ],
          "failures": [
            "7f9a1b52-2763-49ca-a81f-fd2d044e1637",
            "31f9f0bf-1b6c-41f5-a95b-c818e1e7e387"
          ],
          "pending": [],
          "skipped": [],
          "duration": 26895,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "6.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mocha",
        "quiet": true,
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.0.1"
    }
  }
}